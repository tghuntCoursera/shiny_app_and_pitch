modFit <- train(Area~.,method="rpart2", data=training)
fancyRpartPlot(modFit$finalModel)
predict(modFit, newdata)
modFit <- train(Area~.,method="rpart2", data=olive)
predict(modFit, newdata)
library
library()
env()
environment()
environment
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
tr1 train(chd~)
head(trainSA)
tr1 <- train(chd~age+alcohol+obesity, method="glm", family="binomial")
help(train)
library(caret)
tr1 <- train(chd~age+alcohol+obesity, method="glm", family="binomial")
tr1 <- train(chd~age+alcohol+obesity, method="glm", family="binomial", data=trainSA)
head(trainSA)
tr1 <- train(chd~age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
set.seed(13234)
tr1 <- train(chd~age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
head(tr1)
tr1
missClass(trainSA,tr1$pred)
missClass(trainSA,tr1)
pr1 <- pred(tr1, trainSA)
pr2 <- pred(tr1,testSA)
pr1 <- predict(tr1, trainSA)
pr2 <- predict(tr1,testSA)
missClass(trainSA,pr1)
missClass(trainSA$chd,pr1)
missClass(testSA$chd,pr1)
missClass(testSA$chd,pr2)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.test)
vowel.test <- factor(vowel.test(y))
vowel.test$y <- factor(vowel.test$y)
vowel.train$y <- factor(vowel.train$y)
modFit <- train(y~., data=vowel.train, method="rf", prox=TRUE)
help(randomForest)
varImp(modFit)
set.seed(33833)
modFit <- train(y~., data=vowel.train, method="rf", prox=TRUE)
varImp(modFit)
modFit <- train(y~., data=vowel.train, method="rf")
varImp(modFit)
vowel.train$y <- as.factor(vowel.train$y)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
library(randomForest)
modFit <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(modFit)
library(caret)
varImp(modFit)
order(varImp(modFit), decreasing = TRUE)
modFit <- train(y~., data=vowel.train, method="rf")
order(varImp(modFit), decreasing = TRUE)
help("train")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit <- train(y~., data=vowel.train, method="rf", prox=TRUE)
library(caret)
set.seed(33833)
modFit <- train(y~., data=vowel.train, method="rf", prox=TRUE)
order(varImp(modFit), decreasing=T)
varImp(modFit)
library
library()
installed.packages()
installed.packages(fields = c("Name"))
installed.packages(fields = c("VERSION"))
installed.packages(AppliedPredictiveModeling)
installed.packages("AppliedPredictiveModeling")
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
print(ip, row.names=FALSE)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(caret)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(randomForest)
modFit <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
order(varImp(modFit), decreasing=T)
varImp(modFit)
train(y~.,data=vowel.train,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
tr1 <- train(y~.,data=vowel.train,method="rf",
trControl=trainControl(method="cv",number=5),
prox=TRUE,allowParallel=TRUE)
varImp(tr1)
modFit2 <- train(y~., data=vowel.train, method="rf", prox=FALSE)
varImp(modFit2)
modFit3 <- train(y~., data=vowel.train, method="ranger", prox=FALSE)
modFit3 <- train(y~., data=vowel.train, method="rf",trControl = trainControl(method = "oob"),
importance = TRUE )
varImp(modFit3)
modFit4 <- train(y~., data=vowel.train, method="rf", prox=TRUE)
varImp(modFit4, scale=FALSE)
modFit4 <- train(y~., data=vowel.train, method="rf", importance=TRUE)
varImp(modFit4)
modFit4 <- train(y~., data=vowel.train, method="rf", importance=FALSE)
varImp(modFit4)
modFit4 <- train(y~., data=vowel.train, method="rf")
varImp(modFit4)
modFit5 <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
order(varImp(modFit), decreasing=T)
help("randomForest")
modFit6 <- randomForest(y ~ ., data = vowel.train, importance = TRUE)
order(varImp(modFit), decreasing=T)
order(varImp(modFit6), decreasing=T)
varImp(modFit6)
order(varImp(modFit5), decreasing=T)
varImp(modFit4)
varImp(modFit3)
varImp(modFit5)
order(varImp(modFit5), decreasing=T)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(caret)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit <- train(y~., data=vowel.train, method="rf", prox=TRUE, importance=FALSE)
varImp(modFit)
modFit2 <- train(y~., data=vowel.train, method="rf", prox=TRUE, importance=TRUE)
varImp(modFit2)
order(varImp(modFit2), decreasing = TRUE)
order(varImp(modFit2)[1], decreasing = TRUE)
sum(modFit2)
sum(modFit2[1,])
varImp(modFit2)
help("varImp")
varImp(modFit2,scale = FALSE)
varImp(modFit2,numTrees=10)
varImp(modFit2,numTrees=1)
varImp(modFit2,drop=TRUE)
varImp(modFit2,threshold=2)
varImp(modFit2,useModel = "rf")
varImp(modFit2,useModel = TRUE)
pr1 <- predict(modFit1, vowel.train)
pr1 <- predict(modFit, vowel.train)
pr1
varImp(pr1)
help(rfcv)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(caret)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit2 <- train(y~., method="rf", data=vowel.train, trControl = trainControl(method="cv"), number=10)
varImp(modFit2)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
head(vowel.train)
mod1 <- train(y~., method="rf", data=vowel.training, trControl(method="cv"), number=10)
mod2 <- train(y~., method="glm", data=vowel.training)
library(caret)
mod1 <- train(y~., method="rf", data=vowel.training, trControl(method="cv"), number=10)
mod2 <- train(y~., method="glm", data=vowel.training)
mod1 <- train(y~., method="rf", data=vowel.train, trControl(method="cv"), number=10)
mod2 <- train(y~., method="glm", data=vowel.train)
mod1 <- train(y~., method="rf", data=vowel.training, trControl=trainControl(method="cv"), number=10)
mod1 <- train(y~., method="rf", data=vowel.train, trControl=trainControl(method="cv"), number=10)
mod2 <- train(y~., method="glm", data=vowel.train)
mod2
mod2 <- train(y~., method="gbm", data=vowel.train)
mod1
mod2
confusionMatrix(pre1,vowel.test$y)
pre1 <- predict(mod1, vowel.test)
pre2 <- predict(mod2, vowel.test)
confusionMatrix(pre1,vowel.test$y)
confusionMatrix(pre1,vowel.test$y)$overall
confusionMatrix(pre1,vowel.test$y)$overall[1]
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
fitRf <- train(y ~ ., data=vowel.train, method="rf")
fitGBM <- train(y ~ ., data=vowel.train, method="gbm")
predRf <- predict(fitRf, vowel.test)
predGBM <- predict(fitGBM, vowel.test)
confusionMatrix(predRf, vowel.test$y)$overall[1]
confusionMatrix(predGBM, vowel.test$y)$overall[1]
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(caret)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mod1 <- train(y~., method="rf", data=vowel.train, trControl=trainControl(method="cv"), number=10)
pre1 <- predict(mod1, vowel.test)
confusionMatrix(pre1,vowel.test$y)
confusionMatrix(pre1,vowel.test$y)$overall[1]
mod1 <- train(y~., method="rf", data=vowel.train)
pre1 <- predict(mod1, vowel.test)
confusionMatrix(pre1,vowel.test$y)
confusionMatrix(pre1,vowel.test$y)$overall[1]
mod2 <- train(y~., method="gbm", data=vowel.train)
pre2 <- predict(mod2, vowel.test)
confusionMatrix(pre2,vowel.test$y)$overall[1]
pred <- data.frame(pre1, pre2, y=vowel.test$y, agree=pre1 == pred2)
pred <- data.frame(pre1, pre2, y=vowel.test$y, agree=pre1 == pre2)
accuracy <- sum(pre1[pred$agree] == pred$y[pred$agree]) / sum(pred$agree)
accuracy
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modRF <- train(y~., method="rf", data=training)
modGBM <- train(y~., method="gbm", data=training)
modLDA <- train(y~., method="lda", data=training)
modRF <- train(diagnosis~., method="rf", data=training)
modGBM <- train(diagnosis~., method="gbm", data=training)
modLDA <- train(diagnosis~., method="lda", data=training)
predRF <- predict(modRF, testing)
predGBM <- predict(modGBM, testing)
predLDA <- predict(modLDA, testing)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modRF <- train(diagnosis~., method="rf", data=training)
modGBM <- train(diagnosis~., method="gbm", data=training)
modLDA <- train(diagnosis~., method="lda", data=training)
predRF <- predict(modRF, testing)
predGBM <- predict(modGBM, testing)
predLDA <- predict(modLDA, testing)
predDF <- data.frame(prefRF,predGBM,predLDA, diagnosis=testing$diagnosis)
predDF <- data.frame(predRF,predGBM,predLDA, diagnosis=testing$diagnosis)
combModFit <- train(diagnosis~., method="gam", data=predDF)
combPred <- predict(combModFit, predDF)
combPred
confusionMatrix(combPred,predDF$diagnosis)$overall[1]
confusionMatrix(predRF,testing$diagnosis)$overall[1]
confusionMatrix(predGBM,testing$diagnosis)$overall[1]
confusionMatrix(predLDA,testing$diagnosis)$overall[1]
confusionMatrix(combPred,predDF$diagnosis)$overall[1]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
?plot.enet
help(plot.enet)
head(training)
modFit1 <- train(CompressiveStrength~., method="lasso", data=training)
modFit1
plot((modFit1, xvar = c("fraction", "penalty", "L1norm", "step"),
use.color = FALSE, ...))
plot((modFit1, xvar = c("fraction", "penalty", "L1norm", "step"),
use.color = FALSE, ...))
plot.enet(modFit1$finalModel, xvar="penalty", use.color=T)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
library(rpart)
svm.model <- svm(CompressiveStrength~., data=training)
svm.model
svm.pred <- predict(svm.model,testing)
svm.pred
str(svm.pred)
rsme(svm.pred)
library(hydroGOF)
library(hydroGOF)
rsme(svm.pred)
rmse(svm.pred)
rmse(svm.pred, testing)
rmse(svm.pred, testing$CompressiveStrength)
names(training)
svm.pred <- predict(svm.model,testing[-9])
rmse(svm.pred, testing)
rmse(svm.pred, testing$CompressiveStrength)
set.seed(325)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(e1071)
library(rpart)
svm.model <- svm(CompressiveStrength~., data=training)
svm.pred <- predict(svm.model,testing[-1])
library(hydroGOF)
rmse(svm.pred, testing$CompressiveStrength)
svm.pred <- predict(svm.model,testing[-9])
rmse(svm.pred, testing$CompressiveStrength)
acc <- accuracy(pred, testing$CompressiveStrength)
library(forecast)
acc <- accuracy(pred, testing$CompressiveStrength)
acc <- accuracy(svm.pred, testing$CompressiveStrength)
acc
set.seed(32523)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
library(rpart)
svm.model <- svm(CompressiveStrength~., data=training)
svm.pred <- predict(svm.model,testing[-1])
library(hydroGOF)
library(forecast)
acc <- accuracy(svm.pred, testing$CompressiveStrength)
rmse(svm.pred, testing$CompressiveStrength)
svm.pred <- predict(svm.model,testing)
acc <- accuracy(svm.pred, testing$CompressiveStrength)
rmse(svm.pred, testing$CompressiveStrength)
acc
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
data(concrete)
inTrain <- createDataPartition(concrete$CompressiveStrength, p=3/4)[[1]]
training <- concrete[inTrain, ]
testing <- concrete[-inTrain, ]
set.seed(325)
fit <- svm(CompressiveStrength ~., data=training)
# OR another way
# fit <- train(CompressiveStrength ~. data=training, method="svmRadial")
pred <- predict(fit, testing)
acc <- accuracy(pred, testing$CompressiveStrength)
acc
set.seed(3523)
library(forecast)
library(e1071)
library(rpart)
library(AppliedPredictiveModeling)
library(e1071)
data(concrete)
inTrain <- createDataPartition(concrete$CompressiveStrength, p=3/4)[[1]]
training <- concrete[inTrain, ]
testing <- concrete[-inTrain, ]
set.seed(325)
fit <- svm(CompressiveStrength ~., data=training)
# OR another way
# fit <- train(CompressiveStrength ~. data=training, method="svmRadial")
pred <- predict(fit, testing)
acc <- accuracy(pred, testing$CompressiveStrength)
acc
set.seed(3523)
library(forecast)
library(e1071)
library(rpart)
library(caret)
library(AppliedPredictiveModeling)
library(e1071)
data(concrete)
inTrain <- createDataPartition(concrete$CompressiveStrength, p=3/4)[[1]]
training <- concrete[inTrain, ]
testing <- concrete[-inTrain, ]
set.seed(325)
fit <- svm(CompressiveStrength ~., data=training)
# OR another way
# fit <- train(CompressiveStrength ~. data=training, method="svmRadial")
pred <- predict(fit, testing)
acc <- accuracy(pred, testing$CompressiveStrength)
acc
set.seed(32523)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
#Set the seed to 325 and fit a support vector machine using the e1071
#package to predict Compressive Strength using the default settings.
set.seed(325)
library(e1071)
library(rpart)
svm.model <- svm(CompressiveStrength~., data=training)
svm.pred <- predict(svm.model,testing)
library(hydroGOF)
library(forecast)
acc <- accuracy(svm.pred, testing$CompressiveStrength)
rmse(svm.pred, testing$CompressiveStrength)
acc
set.seed(32523)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
#Set the seed to 325 and fit a support vector machine using the e1071
#package to predict Compressive Strength using the default settings.
set.seed(325)
library(e1071)
library(rpart)
svm.model <- svm(CompressiveStrength~., data=training)
svm.pred <- predict(svm.model,testing[-9])
library(hydroGOF)
library(forecast)
acc <- accuracy(svm.pred, testing$CompressiveStrength)
rmse(svm.pred, testing$CompressiveStrength)
acc
set.seed(32523)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
#Set the seed to 325 and fit a support vector machine using the e1071
#package to predict Compressive Strength using the default settings.
set.seed(325)
library(e1071)
library(rpart)
svm.model <- svm(CompressiveStrength~., data=training)
svm.pred <- predict(svm.model,testing[-9])
library(hydroGOF)
#library(forecast)
#acc <- accuracy(svm.pred, testing$CompressiveStrength)
rmse(svm.pred, testing$CompressiveStrength)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
shiny::runApp('Data Products/class/week1/shiny')
shiny::runApp('Data Products/class/week1/shiny')
setwd("~/GitHub/shiny_app_and_pitch")
